-- Server Script (Place in ServerScriptService)

local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local PLACE_ID = 126884695634066 -- Specific Place ID provided
local WEBHOOK_URL = "https://discord.com/api/webhooks/1381469624985452685/IjfTscGJdJ2oZXo3xFkc_Ou_Eb2CqEUhjfCnDELAB4C33-q1xcJxTKa7DPswUzR-fPpD" -- Replace with your Discord webhook URL

-- Function to send webhook message with retry logic and embed
local function sendWebhookMessage(playerName, playerId)
    local maxRetries = 3
    local retryDelay = 2 -- Seconds between retries
    local profileUrl = "https://www.roblox.com/users/" .. playerId .. "/profile"
    local data = {
        embeds = {{
            title = "Successfully Kicked A Player, Rejoining now",
            fields = {
                { name = "Username", value = playerName, inline = true },
                { name = "Profile", value = "[View Profile](" .. profileUrl .. ")", inline = true }
            },
            color = 3447003, -- Blue color (hex: #3498DB)
            timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ") -- ISO 8601 timestamp
        }}
    }
    local jsonData = HttpService:JSONEncode(data)

    for attempt = 1, maxRetries do
        local success, errorMessage = pcall(function()
            HttpService:PostAsync(WEBHOOK_URL, jsonData, Enum.HttpContentType.ApplicationJson)
        end)
        if success then
            print("[KickAndRejoin] Webhook sent for " .. playerName .. " (ID: " .. playerId .. ")")
            return true
        else
            warn("[KickAndRejoin] Webhook attempt " .. attempt .. " failed for " .. playerName .. ": " .. errorMessage)
            if attempt < maxRetries then
                task.wait(retryDelay)
            end
        end
    end
    warn("[KickAndRejoin] All webhook attempts failed for " .. playerName .. " (ID: " .. playerId .. ")")
    return false
end

-- Function to log actions (useful for monitoring multiple accounts)
local function logAction(message)
    print("[KickAndRejoin] " .. os.date("%Y-%m-%d %H:%M:%S") .. ": " .. message)
end

-- Function to handle player joining
local function onPlayerAdded(player)
    local playerId = player.UserId
    local playerName = player.Name
    logAction("Player " .. playerName .. " (ID: " .. playerId .. ") joined. Starting 1-minute timer.")

    -- Start a timer for 1 minute (60 seconds)
    wait(60)

    -- Check if player is still in the game
    if player.Parent then
        logAction("Attempting to rejoin player " .. playerName .. " (ID: " .. playerId .. ") to Place ID: " .. PLACE_ID)
        local success, errorMessage = pcall(function()
            TeleportService:Teleport(PLACE_ID, player)
        end)

        if success then
            logAction("Successfully teleported player " .. playerName .. " (ID: " .. playerId .. ")")
            sendWebhookMessage(playerName, playerId)
        else
            -- Fallback kick if teleport fails
            logAction("Teleport failed for " .. playerName .. " (ID: " .. playerId .. "): " .. errorMessage)
            pcall(function()
                player:Kick("Don't have your target pet\nRejoin")
            end)
            logAction("Kicked player " .. playerName .. " (ID: " .. playerId .. ") with message: Don't have your target pet")
            sendWebhookMessage(playerName, playerId)
            -- Wait briefly to ensure kick processes
            task.wait(1)
        end
    else
        logAction("Player " .. playerName .. " (ID: " .. playerId .. ") left before timer ended")
    end
end

-- Connect the function to PlayerAdded event
Players.PlayerAdded:Connect(function(player)
    coroutine.wrap(onPlayerAdded)(player) -- Run in a coroutine to handle multiple players
end)

-- Handle players already in the game when the script starts
for _, player in pairs(Players:GetPlayers()) do
    coroutine.wrap(onPlayerAdded)(player)
end
